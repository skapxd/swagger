export declare const createCatDtoAltText = "\nimport { IsInt, IsString } from 'class-validator';\nimport * as package from 'class-validator';\n\nenum Status {\n    ENABLED,\n    DISABLED\n}\n\ninterface Node {\n    id: number;\n}\n\ntype AliasedType = {\n    type: string;\n};\ntype NumberAlias = number;\n\nexport class CreateCatDto2 {\n  @package.IsString()\n  name: string;\n  age: number = 3;\n  tags: string[];\n  status: Status = Status.ENABLED;\n  readonly breed?: string | undefined;\n  nodes: Node[];\n  alias: AliasedType;\n  /** NumberAlias */\n  numberAlias: NumberAlias;\n  union: 1 | 2;\n  intersection: Function & string;\n  nested: {\n      first: string,\n      second: number,\n      status: Status,\n      tags: string[],\n      nodes: Node[]\n      alias: AliasedType,\n      numberAlias: NumberAlias,\n  },\n  prop: {\n    [x: string]: string;\n  }\n  amount: bigint;\n}\n";
export declare const createCatDtoTextAltTranspiled = "import * as openapi from \"@nestjs/swagger\";\nimport * as package from 'class-validator';\nvar Status;\n(function (Status) {\n    Status[Status[\"ENABLED\"] = 0] = \"ENABLED\";\n    Status[Status[\"DISABLED\"] = 1] = \"DISABLED\";\n})(Status || (Status = {}));\nexport class CreateCatDto2 {\n    constructor() {\n        this.age = 3;\n        this.status = Status.ENABLED;\n    }\n    static _OPENAPI_METADATA_FACTORY() {\n        return { name: { required: true, type: () => String }, age: { required: true, type: () => Number, default: 3 }, tags: { required: true, type: () => [String] }, status: { required: true, default: Status.ENABLED, enum: Status }, breed: { required: false, type: () => String }, nodes: { required: true, type: () => [Object] }, alias: { required: true, type: () => Object }, numberAlias: { required: true, type: () => Number, description: \"NumberAlias\" }, union: { required: true, type: () => Object }, intersection: { required: true, type: () => Object }, nested: { required: true, type: () => ({ first: { required: true, type: () => String }, second: { required: true, type: () => Number }, status: { required: true, enum: Status }, tags: { required: true, type: () => [String] }, nodes: { required: true, type: () => [Object] }, alias: { required: true, type: () => Object }, numberAlias: { required: true, type: () => Number } }) }, amount: { required: true, type: () => BigInt } };\n    }\n}\n__decorate([\n    package.IsString()\n], CreateCatDto2.prototype, \"name\", void 0);\n";
